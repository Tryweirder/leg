// Package errors contains errors for the domain "lis".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawrgo "github.com/puppetlabs/errawr-go"
	impl "github.com/puppetlabs/errawr-go/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawrgo.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "lis",
	Title: "Insights Scheduler Library",
}

// LifecycleSection defines a section of errors with the following scope:
// Lifecycle errors
var LifecycleSection = &impl.ErrorSection{
	Key:   "lifecycle",
	Title: "Lifecycle errors",
}

// LifecycleCloseErrorCode is the code for an instance of "close_error".
const LifecycleCloseErrorCode = "lis_lifecycle_close_error"

// IsLifecycleCloseError tests whether a given error is an instance of "close_error".
func IsLifecycleCloseError(err errawrgo.Error) bool {
	return err != nil && err.Is(LifecycleCloseErrorCode)
}

// IsLifecycleCloseError tests whether a given error is an instance of "close_error".
func (External) IsLifecycleCloseError(err errawrgo.Error) bool {
	return IsLifecycleCloseError(err)
}

// LifecycleCloseErrorBuilder is a builder for "close_error" errors.
type LifecycleCloseErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "close_error" from this builder.
func (b *LifecycleCloseErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The scheduled tasks failed to terminate.",
		Technical: "The scheduled tasks failed to terminate.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "close_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     LifecycleSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Close error",
		Version:          1,
	}
}

// NewLifecycleCloseErrorBuilder creates a new error builder for the code "close_error".
func NewLifecycleCloseErrorBuilder() *LifecycleCloseErrorBuilder {
	return &LifecycleCloseErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewLifecycleCloseError creates a new error with the code "close_error".
func NewLifecycleCloseError() Error {
	return NewLifecycleCloseErrorBuilder().Build()
}
